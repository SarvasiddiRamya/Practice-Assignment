using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;

namespace Create
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "ICalculator" in both code and config file together.
    public class ICalculator : IICalculator
    {
        public int sum(int num1, int num2)
        {
            return num1 + num2;
        }

        public int subtract(int num1, int num2)
        {
            if (num1 > num2)
            {
                return num1 - num2;
            }
            else { return 0; }
        }

        public int Multiply(int num1, int num2)
        {
            return num1 * num2;
        }

        public int Division(int num1, int num2)
        {
            return num1 / num2;
        }
    }
}



||Calculator.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;

namespace Create
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the interface name "IICalculator" in both code and config file together.
    [ServiceContract]
    public interface IICalculator
    {
        [OperationContract]
        //  void DoWork();
        int sum(int num1, int num2);//Addition

        [OperationContract]
         int subtract(int num1, int num2);//Subtraction

        [OperationContract]
        int Multiply(int num1, int num2);//Multiplication
        [OperationContract]
        int Division(int num1, int num2);//Division
    }
}

//Use a data contract to composite types to service operations

    [DataContract]//declare and assign the variables

    public class CompositeType
{
    bool boolvalue = true;
    String stringValue = "Hello World";

    [DataMember] //you will call or invoke the data information

    public bool BoolValue
    {
        get { return boolvalue; }
        set { boolvalue = value; }
    }

    [DataMember]
    public string StringValue
    {
        get { return stringValue; }
        set { stringValue = value; }
    }
}
