using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;

namespace ifwcfassignment
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the interface name "Iloop" in both code and config file together.
    [ServiceContract]
    public interface Iloop
    {
        [OperationContract]
        //void DoWork();
        int operators(int num1, int num2);

        [OperationContract]

        int operator1(int num1, int num2);
    }

}

[DataContract]//declared and assign the variables
public class CompositeType
{
    bool boolvalue = true;
    string stringValue = "Hello World";

    [DataMember]
    public bool BoolValue
    {
        get { return boolvalue; }
        set { boolvalue = value; }
    }

    [DataMember]
    public string StringValue
    {
        get { return stringValue; }
        set { stringValue = value; }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;

namespace ifwcfassignment
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "loop" in both code and config file together.
    public class loop : Iloop
    {
        public int operators(int num1, int num2)
        {
            if(num1 > num2)
            {
                return num1 + num2;
            }

            else
            {
                return num1 - num2;
            }
        }

        public int operator1(int num1, int num2)
        {
            if (num1 < num2)
            {
                return num1 * num2;
            }

            else
            {
                return num1 / num2;
            }
        }
    }
}
