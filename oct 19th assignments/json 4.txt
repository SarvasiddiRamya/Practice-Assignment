<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title></title>
</head>
<body>
    <p>In this example, <b>this</b> represents the <b>person</b> object.</p>
    <p>Because the person object "owns" the fullName method.</p>

    <p id="demo"></p>

    <script>
        // Create an object:
        var person = {
            firstName: "Sarvasiddi",
            lastName: "Ramya",
            id: 5566,
            fullName: function () {
                return this.firstName + " " + this.lastName;
            }
        };

        // Display data from the object:
        document.getElementById("demo").innerHTML = person.fullName();
    </script>
    <h2>The JavaScript <i>this</i> Keyword</h2>

    <button onclick="this.style.display='none'">Click to Remove Me!</button>
    <p>In this example <strong>this</strong> refers to person2, even if it is a method of person1:</p>

    <p id="demo1"></p>

    <script>
        var person1 = {
            fullName: function () {
                return this.firstName + " " + this.lastName;
            }
        }
        var person2 = {
            firstName: "Saarvasiddi",
            lastName: "Vasavi",
        }
        var x = person1.fullName.call(person2);
        document.getElementById("demo1").innerHTML = x;
    </script>
</body>
</html>